package ru.polyrythms.telegrambot.bot;

import lombok.SneakyThrows;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Voice;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.polyrythms.kafka.Topics;
import ru.polyrythms.kafka.dto.AudioDecryptionTask;
import ru.polyrythms.telegrambot.config.TelegramBotConfig;
import ru.polyrythms.telegrambot.entity.AdminUser;
import ru.polyrythms.telegrambot.entity.TelegramGroup;
import ru.polyrythms.telegrambot.entity.AdminRole;
import ru.polyrythms.telegrambot.service.AdminService;
import ru.polyrythms.telegrambot.service.AudioStorageService;
import ru.polyrythms.telegrambot.service.TelegramGroupService;

import java.io.File;
import java.util.List;
import java.util.regex.Pattern;

@Service
public class VoiceMessageBot extends TelegramLongPollingBot {

    private final TelegramBotConfig config;
    private final AudioStorageService audioStorageService;
    private final KafkaTemplate<String, AudioDecryptionTask> kafkaTemplate;
    private final TelegramGroupService groupService;
    private final AdminService adminService;

    private static final Pattern ADD_ADMIN_PATTERN = Pattern.compile("/addadmin\\s+(\\S+)\\s+(OWNER|ADMIN|MODERATOR)", Pattern.CASE_INSENSITIVE);
    private static final Pattern REMOVE_ADMIN_PATTERN = Pattern.compile("/removeadmin\\s+(\\S+)");
    private static final Pattern ADD_GROUP_PATTERN = Pattern.compile("/addgroup\\s+(-?\\d+)\\s+(.+)");
    private static final Pattern REMOVE_GROUP_PATTERN = Pattern.compile("/(removegroup|deactivategroup)\\s+(-?\\d+)");
    private static final Pattern ACTIVATE_GROUP_PATTERN = Pattern.compile("/activategroup\\s+(-?\\d+)");

    public VoiceMessageBot(TelegramBotConfig config,
                           AudioStorageService audioStorageService,
                           KafkaTemplate<String, AudioDecryptionTask> kafkaTemplate,
                           TelegramGroupService groupService,
                           AdminService adminService) {
        super(config.getBotToken());
        this.config = config;
        this.audioStorageService = audioStorageService;
        this.kafkaTemplate = kafkaTemplate;
        this.groupService = groupService;
        this.adminService = adminService;
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    @SneakyThrows
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            Long userId = message.getFrom().getId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
            if (message.hasText() && message.getText().startsWith("/") && !isGroupChat(message.getChat())) {
                handleCommand(message);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
            if (message.hasVoice() && isGroupChat(message.getChat())) {
                if (groupService.isGroupAllowed(chatId)) {
                    handleVoiceMessage(message, chatId);
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö (–¥–ª—è –≤—Å–µ—Ö)
            if (message.hasVoice() && !isGroupChat(message.getChat())) {
                handleVoiceMessage(message, chatId);
            }
        }
    }

    private void handleCommand(Message message) throws TelegramApiException {
        String text = message.getText();
        Long chatId = message.getChatId();
        Long userId = message.getFrom().getId();
        String[] args = text.split("\\s+");
        String command = args[0].toLowerCase();

        switch (command) {
            case "/start":
                handleStartCommand(chatId, userId);
                break;
            case "/addadmin":
                handleAddAdminCommand(message, args, chatId, userId);
                break;
            case "/removeadmin":
                handleRemoveAdminCommand(message, args, chatId, userId);
                break;
            case "/addgroup":
                handleAddGroupCommand(message, args, chatId, userId);
                break;
            case "/removegroup":
            case "/deactivategroup":
                handleDeactivateGroupCommand(message, args, chatId, userId);
                break;
            case "/activategroup":
                handleActivateGroupCommand(message, args, chatId, userId);
                break;
            case "/listgroups":
                handleListGroupsCommand(chatId, userId);
                break;
            case "/listadmins":
                handleListAdminsCommand(chatId, userId);
                break;
            case "/groupinfo":
                handleGroupInfoCommand(message, chatId, userId);
                break;
            case "/stats":
                handleStatsCommand(chatId, userId);
                break;
            case "/help":
                handleHelpCommand(chatId, userId);
                break;
            case "/myrole":
                handleMyRoleCommand(chatId, userId);
                break;
            default:
                sendTextMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void handleStartCommand(Long chatId, Long userId) throws TelegramApiException {
        String welcome = "ü§ñ –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n";

        if (adminService.isAdmin(userId)) {
            AdminRole role = adminService.getUserRole(userId);
            welcome += "üëë –í–∞—à–∞ —Ä–æ–ª—å: " + role + "\n";
            welcome += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥";
        } else {
            welcome += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n";
            welcome += "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        }

        sendTextMessage(chatId, welcome);
    }

    private void handleAddAdminCommand(Message message, String[] args, Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageAdmins(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
            return;
        }

        var matcher = ADD_ADMIN_PATTERN.matcher(message.getText());
        if (matcher.matches()) {
            try {
                String target = matcher.group(1);
                AdminRole role = AdminRole.valueOf(matcher.group(2).toUpperCase());

                Long targetUserId = parseUserId(target);
                String username = extractUsername(target);

                adminService.addAdmin(userId, targetUserId, username, role);
                sendTextMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: " + username + " (" + role + ")");

            } catch (Exception e) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        } else {
            sendTextMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin @username_or_id ADMIN|MODERATOR");
        }
    }

    private void handleRemoveAdminCommand(Message message, String[] args, Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageAdmins(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
            return;
        }

        var matcher = REMOVE_ADMIN_PATTERN.matcher(message.getText());
        if (matcher.matches()) {
            try {
                String target = matcher.group(1);
                Long targetUserId = parseUserId(target);

                adminService.removeAdmin(userId, targetUserId);
                sendTextMessage(chatId, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω");

            } catch (Exception e) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        } else {
            sendTextMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin @username_or_id");
        }
    }

    private void handleAddGroupCommand(Message message, String[] args, Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageGroups(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.");
            return;
        }

        var matcher = ADD_GROUP_PATTERN.matcher(message.getText());
        if (matcher.matches()) {
            try {
                Long groupChatId = Long.parseLong(matcher.group(1));
                String groupTitle = matcher.group(2);

                groupService.addGroup(groupChatId, groupTitle, userId);
                sendTextMessage(chatId, "‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: \"" + groupTitle + "\"");

            } catch (Exception e) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        } else {
            sendTextMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgroup <chat_id> \"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\"");
        }
    }

    private void handleDeactivateGroupCommand(Message message, String[] args, Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageGroups(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.");
            return;
        }

        var matcher = REMOVE_GROUP_PATTERN.matcher(message.getText());
        if (matcher.matches()) {
            try {
                Long groupChatId = Long.parseLong(matcher.group(2));
                groupService.deactivateGroup(groupChatId, userId);
                sendTextMessage(chatId, "‚úÖ –ì—Ä—É–ø–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
            } catch (Exception e) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        } else {
            sendTextMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removegroup <chat_id>");
        }
    }

    private void handleActivateGroupCommand(Message message, String[] args, Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageGroups(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.");
            return;
        }

        var matcher = ACTIVATE_GROUP_PATTERN.matcher(message.getText());
        if (matcher.matches()) {
            try {
                Long groupChatId = Long.parseLong(matcher.group(1));
                groupService.activateGroup(groupChatId, userId);
                sendTextMessage(chatId, "‚úÖ –ì—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
            } catch (Exception e) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        } else {
            sendTextMessage(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activategroup <chat_id>");
        }
    }

    private void handleListGroupsCommand(Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.isAdmin(userId)) {
            sendTextMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
            return;
        }

        List<TelegramGroup> groups = groupService.getAllGroups();
        if (groups.isEmpty()) {
            sendTextMessage(chatId, "üìù –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç");
            return;
        }

        StringBuilder response = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n\n");
        for (TelegramGroup group : groups) {
            response.append(group.getIsActive() ? "‚úÖ " : "‚ùå ")
                    .append(group.getTitle())
                    .append("\nID: ")
                    .append(group.getChatId())
                    .append("\n–î–æ–±–∞–≤–∏–ª: ")
                    .append(group.getAddedByUsername() != null ? group.getAddedByUsername() : group.getAddedBy())
                    .append("\n\n");
        }

        sendTextMessage(chatId, response.toString());
    }

    private void handleListAdminsCommand(Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.canManageAdmins(userId)) {
            sendTextMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
            return;
        }

        List<AdminUser> admins = adminService.getAllAdmins();
        StringBuilder response = new StringBuilder("üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n");

        for (AdminUser admin : admins) {
            response.append(admin.getRole() == AdminRole.OWNER ? "üëë " : "üîß ")
                    .append(admin.getUsername())
                    .append(" (ID: ")
                    .append(admin.getUserId())
                    .append(")\n–†–æ–ª—å: ")
                    .append(admin.getRole())
                    .append("\n\n");
        }

        sendTextMessage(chatId, response.toString());
    }

    private void handleGroupInfoCommand(Message message, Long chatId, Long userId) throws TelegramApiException {
        Chat chat = message.getChat();
        if (!isGroupChat(chat)) {
            sendTextMessage(chatId, "‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö");
            return;
        }

        String info = String.format(
                """
                        üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:
                        
                        –ù–∞–∑–≤–∞–Ω–∏–µ: %s
                        Chat ID: %d
                        –¢–∏–ø: %s
                        
                        –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                        /addgroup %d "%s\"""",
                chat.getTitle(),
                chat.getId(),
                chat.isSuperGroupChat() ? "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞" : "–≥—Ä—É–ø–ø–∞",
                chat.getId(),
                chat.getTitle()
        );

        sendTextMessage(chatId, info);
    }

    private void handleStatsCommand(Long chatId, Long userId) throws TelegramApiException {
        if (!adminService.isAdmin(userId)) {
            sendTextMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
            return;
        }

        long totalGroups = groupService.getActiveGroupsCount();
        long userGroups = groupService.getUserGroupsCount(userId);
        long totalAdmins = adminService.getAdminCount();

        String stats = String.format(
                """
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                        
                        –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: %d
                        –í–∞—à–∏—Ö –≥—Ä—É–ø–ø: %d
                        –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %d""",
                totalGroups, userGroups, totalAdmins
        );

        sendTextMessage(chatId, stats);
    }

    private void handleHelpCommand(Long chatId, Long userId) throws TelegramApiException {
        StringBuilder help = new StringBuilder("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n");

        if (adminService.isAdmin(userId)) {
            AdminRole role = adminService.getUserRole(userId);
            help.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (").append(role).append("):\n");

            if (adminService.canManageAdmins(userId)) {
                help.append("/addadmin @user ROLE - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n");
                help.append("/removeadmin @user - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n");
                help.append("/listadmins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n");
            }

            if (adminService.canManageGroups(userId)) {
                help.append("/addgroup <id> \"name\" - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\n");
                help.append("/removegroup <id> - –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É\n");
                help.append("/activategroup <id> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É\n");
            }

            help.append("/listgroups - –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø\n");
            help.append("/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n");
            help.append("/myrole - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å\n");
        }

        help.append("/groupinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ (–≤ –≥—Ä—É–ø–ø–µ)\n");
        help.append("/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n");

        sendTextMessage(chatId, help.toString());
    }

    private void handleMyRoleCommand(Long chatId, Long userId) throws TelegramApiException {
        if (adminService.isAdmin(userId)) {
            AdminRole role = adminService.getUserRole(userId);
            sendTextMessage(chatId, "üëë –í–∞—à–∞ —Ä–æ–ª—å: " + role);
        } else {
            sendTextMessage(chatId, "‚ÑπÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private Long parseUserId(String input) {
        if (input.startsWith("@")) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –æ—Ç username
            return (long) input.hashCode();
        }
        return Long.parseLong(input);
    }

    private String extractUsername(String input) {
        if (input.startsWith("@")) {
            return input;
        }
        return "user_" + input;
    }

    private boolean isGroupChat(Chat chat) {
        return chat.isGroupChat() || chat.isSuperGroupChat();
    }

    @SneakyThrows
    private void handleVoiceMessage(Message message, Long chatId) {
        Voice voice = message.getVoice();

        // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        GetFile getFile = new GetFile();
        getFile.setFileId(voice.getFileId());
        String filePath = execute(getFile).getFilePath();
        File voiceFile = downloadFile(filePath);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MinIO
        String audioId = audioStorageService.storeAudio(voiceFile, voice.getFileUniqueId());
        String audioUrl = audioStorageService.getPublicAudioUrl(audioId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ Kafka
        AudioDecryptionTask task = AudioDecryptionTask.createVoiceTask(audioId, chatId, audioUrl);
        kafkaTemplate.send(Topics.AUDIO_DECRYPTION_REQUESTS, task.getTaskId(), task);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        String response = isGroupChat(message.getChat()) ?
                "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É..." :
                "‚úÖ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...";

        sendTextMessage(chatId, response);
    }

    public void sendTextMessage(Long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        execute(message);
    }
}